<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo的next主题的博客文章目录显示问题</title>
    <url>/2023/11/23/Hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p> 写完文章后目录中的编号在Typora中没问题，但在网页查看后出现了数字编号重复出现的问题，错误如下图：</p>
<img src="/img/文章目录显示错误.png" />

<p>感觉这个错误很扯淡，在<code>csdn</code>上找到了解决办法：</p>
<blockquote>
<p>打开<code>next</code>主题下的<code>_config.yml</code>配置文件，将<code>toc</code>部分中的<code>number</code>的值改为<code>false</code>，原值为true，会自动为目录添加数字序号。</p>
</blockquote>
<p><a href="%5B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E3%80%90Hexo%E3%80%91%E2%80%94%E2%80%94%E8%A7%A3%E5%86%B3%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E8%87%AA%E5%8A%A8%E7%BC%96%E5%8F%B7%E9%97%AE%E9%A2%98_hexo%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/Passerby_Wang/article/details/121342829)">CSDN参考链接</a></p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC相关知识</title>
    <url>/2023/11/22/JDBC%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>本文全部内容均来自<code>黑马程序员</code>的资料，本文仅对其总结，很多复杂难懂内容跳过。</p>
<h1 id="1-JDBC介绍"><a href="#1-JDBC介绍" class="headerlink" title="1. JDBC介绍"></a>1. JDBC介绍</h1><h2 id="1-1-JDBC概念"><a href="#1-1-JDBC概念" class="headerlink" title="1.1 JDBC概念"></a>1.1 JDBC概念</h2><blockquote>
<p>全称（ Java database connectivity）Java数据库连接</p>
<p>JDBC 是使用Java语言操作关系型数据库的一套API</p>
</blockquote>
<img src="/img/JDBC概念.png" style="zoom:70%" />

<p>同一套Java代码无法操作不同的关系型数据库，因为每一个关系型数据库的底层实现不同，sun公司制定了一套操作数据库的标准接口（JDBC），JDBC中定义了所有操作关系型数据库的规则，接口无法使用，需要使用接口的实现类，这套实现类（称之为：驱动），由各自的数据库厂商给出。</p>
<h2 id="1-2-JDBC本质"><a href="#1-2-JDBC本质" class="headerlink" title="1.2 JDBC本质"></a>1.2 JDBC本质</h2><blockquote>
<p>官方定义的一套操作所有关系型数据库的规则，即接口。</p>
<p>各个数据库厂商去实现这套接口，提供数据库驱动jar包</p>
<p>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中德实现类</p>
</blockquote>
<h2 id="1-3-JDBC好处"><a href="#1-3-JDBC好处" class="headerlink" title="1.3 JDBC好处"></a>1.3 JDBC好处</h2><blockquote>
<p>各个数据库厂商实现同一个相同的接口，客户实际使用时调用这套接口（JDBC）操作不同的数据库。</p>
<p>可随时替换底层数据库，且访问数据库的Java代码不变。</p>
</blockquote>
<p>客户编写操作数据库的代码只需要面向这套接口（JDBC），操作哪个关系型数据库就导入对应的数据库的驱动包，如操作MySQL数据库就需要在项目中导入MySQL数据库的驱动包。</p>
<h1 id="2-JDBC快速入门"><a href="#2-JDBC快速入门" class="headerlink" title="2. JDBC快速入门"></a>2. JDBC快速入门</h1><p>Java操作数据库的流程是：</p>
<blockquote>
<p>第一步：编写Java代码</p>
<p>第二部：Java代码将sql发送到MySQL服务端</p>
<p>第三步： MySQL服务端接受sql语句并执行</p>
<p>第四步：MySQL服务端将sql语句执行结果返回给Java代码</p>
</blockquote>
<h2 id="2-1-编写代码步骤"><a href="#2-1-编写代码步骤" class="headerlink" title="2.1 编写代码步骤"></a>2.1 编写代码步骤</h2><ol>
<li><p>创建工程，导入驱动jar包</p>
</li>
<li><p>注册驱动(以MySQL为例)，目的是将数据库驱动程序加载到<code>JVM</code>中,旧版本JDBC需要手动注册驱动，新版本驱动会自动注册，以下为手动注册代码，现在在编程是可以不用写以下代码，因为会自动注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forname(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接，Java代码需要发送sql给MySQL服务端，就需要先建立连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManage.getConnection(url, username, password);</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update...&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取执行sql的对象，执行sql语句需要sql执行对象，就是Statement对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> coon.createStatement();</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行SQL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stmt.executeUpdate(sql);</span><br></pre></td></tr></table></figure>
</li>
<li><p>处理返回结果</p>
</li>
<li><p>释放资源</p>
</li>
</ol>
<h2 id="2-2-完整代码"><a href="#2-2-完整代码" class="headerlink" title="2.2 完整代码"></a>2.2 完整代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 1.注册驱动</span></span><br><span class="line">		Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">		<span class="comment">// 2.获取连接</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db1&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">		<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">		<span class="comment">// 3.定义SQL</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 2000 where id = 1&quot;</span>;</span><br><span class="line">		<span class="comment">// 4.获取执行SQL对象 Statement</span></span><br><span class="line">		<span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">		<span class="comment">// 5.执行SQL</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">		<span class="comment">// 6.处理结果</span></span><br><span class="line">		...</span><br><span class="line">		System.out.println(count);</span><br><span class="line">		<span class="comment">// 7.释放资源</span></span><br><span class="line">		stmt.close();</span><br><span class="line">		coon.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-JDBC-API详解"><a href="#3-JDBC-API详解" class="headerlink" title="3. JDBC API详解"></a>3. JDBC API详解</h1><h2 id="3-1-DrvierManage"><a href="#3-1-DrvierManage" class="headerlink" title="3.1 DrvierManage"></a>3.1 DrvierManage</h2><ul>
<li>获取数据库连接</li>
</ul>
<table>
<thead>
<tr>
<th>static Connection</th>
<th>getConnection(String url, String username, String password)</th>
<th>尝试与给定数据库URL连接</th>
</tr>
</thead>
</table>
<p>参数说明：</p>
<blockquote>
<ul>
<li>url：连接路径</li>
</ul>
<p>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称?参数键值对1&amp;参数键值对2。</p>
<p>示例：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1</p>
<p>细节：</p>
<ul>
<li>如果连接的是本机MySQL服务器，并且MySQL服务器默认端口是3306，则url可简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称?参数键值对</li>
<li>配置useSSL&#x3D;false参数，禁用安全连接方式，解决警告提示</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>user：用户名</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>password: 密码</li>
</ul>
</blockquote>
<h2 id="3-2-Connection"><a href="#3-2-Connection" class="headerlink" title="3.2 Connection"></a>3.2 Connection</h2><p>Connection（数据库连接对象）作用：</p>
<ul>
<li>获取执行SQL对象</li>
<li>管理事务</li>
</ul>
<h3 id="3-2-1-获取SQL执行对象"><a href="#3-2-1-获取SQL执行对象" class="headerlink" title="3.2.1 获取SQL执行对象"></a>3.2.1 获取SQL执行对象</h3><ul>
<li>普通执行SQL对象</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement <span class="title function_">createStatement</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>预编译SQL的执行SQL对象，可防止SQL注入</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PreparedStatement <span class="title function_">prepareStatement</span><span class="params">(sql)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-事务管理"><a href="#3-2-2-事务管理" class="headerlink" title="3.2.2 事务管理"></a>3.2.2 事务管理</h3><p>MySQL事务管理的操作：</p>
<blockquote>
<p>开启事务：BEGIN; 或者START TRANSACTION;</p>
<p>提交事务：COMMIT; </p>
<p>回滚事务：ROLLBACK；</p>
</blockquote>
<p>Connection接口中定义了三个对应的方法：</p>
<ul>
<li><p>开启事务</p>
<table>
<thead>
<tr>
<th>void</th>
<th>setAutoCommit(boolean autoCommit)</th>
</tr>
</thead>
</table>
<p>参数autoCommit表示是否自动提交事务，true表示自动提交，false表示手动提交。而开启事务需要将该参数设为false。</p>
</li>
<li><p>提交事务</p>
<table>
<thead>
<tr>
<th>void</th>
<th>commit()</th>
</tr>
</thead>
</table>
</li>
<li><p>回滚事务</p>
<table>
<thead>
<tr>
<th>void</th>
<th>rollback()</th>
</tr>
</thead>
</table>
</li>
</ul>
<p>具体代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC API详解： Connection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 1.注册驱动</span></span><br><span class="line">		Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">		<span class="comment">// 2.获取连接，如果连接的是本机MySQL且端口是3306可以简化书写</span></span><br><span class="line">		<span class="comment">// String url = &quot;jdbc:mysql://127.0.0.1:3306/db1&quot;;</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">		<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">		<span class="comment">// 3.定义SQL</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 3000 where id = 1&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 3000 where id = 2&quot;</span>;</span><br><span class="line">		<span class="comment">// 4.获取执行SQL对象 Statement</span></span><br><span class="line">		<span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// ======开启事务======</span></span><br><span class="line">			conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">			<span class="comment">// 5.执行SQL</span></span><br><span class="line">			<span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> stmt.executeUpdate(sql1);<span class="comment">//受影响的行数</span></span><br><span class="line">			<span class="comment">// 6.处理结果</span></span><br><span class="line">			System.out.println(count1);</span><br><span class="line">			<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">			<span class="comment">// 5.执行SQL</span></span><br><span class="line">			<span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> stmt.executeUpdate(sql2);<span class="comment">//受影响的行数</span></span><br><span class="line">			<span class="comment">// 6.处理结果</span></span><br><span class="line">			System.out.println(count2);</span><br><span class="line">			<span class="comment">// ======提交事务======</span></span><br><span class="line">			<span class="comment">//程序运行到此处，说明没有出现任何问题，则需要提交事务</span></span><br><span class="line">			coon.commit();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">			<span class="comment">// ======回滚事务======</span></span><br><span class="line">			<span class="comment">//程序在出现异常时会执行到这个地方，此时就需要回滚事务</span></span><br><span class="line">			conn.rollback();</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 7.释放资源</span></span><br><span class="line">		stmt.close();</span><br><span class="line">		coon.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-Statement"><a href="#3-3-Statement" class="headerlink" title="3.3 Statement"></a>3.3 Statement</h2><p>Statement对象的作用是用来执行SQL语句，针对不同的SQL语句使用的方法也不同。</p>
<ul>
<li><p>执行DDL、DML语句</p>
<blockquote>
<p>开发中很少使用Java代码操作DDL语句</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th>int</th>
<th>executeUpdate(String sql)</th>
<th>执行给定的SQL语句，可能是INSERT,UPDATE或DELETE语句</th>
</tr>
</thead>
</table>
<ul>
<li><p>执行DQL语句</p>
<table>
<thead>
<tr>
<th>ResultSet</th>
<th>executeQuery(String sql)</th>
<th>执行给定的SQL语句，返回单个ResultSet对象</th>
</tr>
</thead>
</table>
</li>
</ul>
<h2 id="3-4-ResultSet"><a href="#3-4-ResultSet" class="headerlink" title="3.4 ResultSet"></a>3.4 ResultSet</h2><h3 id="3-4-1-介绍"><a href="#3-4-1-介绍" class="headerlink" title="3.4.1 介绍"></a>3.4.1 介绍</h3><p>ResultSet（结果集对象）封装了SQL查询语句的结果。对应执行DQL语句的方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet <span class="title function_">executeQuery</span><span class="params">(sql)</span>: 执行DQL语句，返回ResultSet对象</span><br></pre></td></tr></table></figure>

<p><code>ResultSet</code>对象提供了操作查询结果的方法，如下：</p>
<blockquote>
<p>boolean next()</p>
<ul>
<li>将光标从当前位置向后移动一行</li>
<li>判断当前行是否为有效行</li>
</ul>
<p>方法返回值说明：</p>
<pre><code>- true：有效行，当前行有数据
- false：无效行，当前行没有数据
</code></pre>
</blockquote>
<blockquote>
<p>xxx getXxx(参数)：获取数据</p>
<ul>
<li>xxx：数据类型；如：int getInt(参数)；String getString(参数)；</li>
<li>参数<ul>
<li>int类型的参数：列的名称（行号也可以）</li>
<li>String类型的参数：列的名称（行号也可以）</li>
</ul>
</li>
</ul>
</blockquote>
<p>如下为执行SQL语句后的结果：</p>
<img src="/img/SQL查询结果.png" style="zoom:80%"/>

<p>如图，一开始光标指在第一行前，如图所示红色箭头指向于表头行。当我们调用了<code>next()</code>方法后，光标就下移到第一行，并且方法返回<code>true</code>，此时可通过<code>getInt(&quot;id&quot;)</code>获取当前行id字段的值，也可通过<code>getString(&quot;name&quot;)</code>获取当前行的name字段的值。如果想获取下一行的数据，继续调用<code>next()</code>方法。</p>
<h3 id="3-4-2-代码实现"><a href="#3-4-2-代码实现" class="headerlink" title="3.4.2 代码实现"></a>3.4.2 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 执行DQL</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResultSet</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    <span class="comment">//3. 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    <span class="comment">//4. 获取statement对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">//5. 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">    <span class="comment">//6. 处理结果， 遍历rs中的所有数据</span></span><br><span class="line">    <span class="comment">/* // 6.1 光标向下移动一行，并且判断当前行是否有数据</span></span><br><span class="line"><span class="comment">        while (rs.next())&#123;</span></span><br><span class="line"><span class="comment">            //6.2 获取数据  getXxx()</span></span><br><span class="line"><span class="comment">            int id = rs.getInt(1);</span></span><br><span class="line"><span class="comment">            String name = rs.getString(2);</span></span><br><span class="line"><span class="comment">            double money = rs.getDouble(3);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            System.out.println(id);</span></span><br><span class="line"><span class="comment">            System.out.println(name);</span></span><br><span class="line"><span class="comment">            System.out.println(money);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            System.out.println(&quot;--------------&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    <span class="comment">// 6.1 光标向下移动一行，并且判断当前行是否有数据</span></span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        <span class="comment">//6.2 获取数据  getXxx()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(money);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-5-PreparedStatement"><a href="#3-5-PreparedStatement" class="headerlink" title="3.5 PreparedStatement"></a>3.5 PreparedStatement</h2><blockquote>
<ul>
<li><p>PreparedStatement作用：</p>
<p>预编译SQL语句并执行，预防SQL注入问题</p>
</li>
</ul>
</blockquote>
<h3 id="3-5-1-SQL注入"><a href="#3-5-1-SQL注入" class="headerlink" title="3.5.1 SQL注入"></a>3.5.1 SQL注入</h3><p><code>SQL注入</code>是通过操作输入来修改事先定义好的SQL语句，达到执行代码来攻击服务器的手段，具体详情感觉与Java学习关系不大，我也不太懂，就不详细介绍了。</p>
<h3 id="3-5-2-PreparedStatement概述"><a href="#3-5-2-PreparedStatement概述" class="headerlink" title="3.5.2 PreparedStatement概述"></a>3.5.2 PreparedStatement概述</h3><ul>
<li><p>获取PreparedStatement对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//SQL语句中的参数值，使用 ? 占位符替代</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//通过Connection对象获取，并传入对应的SQL语句，这里比以前的createStatement()方法参数传递提前了</span></span><br><span class="line">  <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> coon.preparedStatement(sql);</span><br><span class="line"></span><br><span class="line">- 设置参数值</span><br><span class="line"></span><br><span class="line">  上面的SQL语句中参数使用  `?` 进行占位，在此之前要设置这些 `?` 的值</span><br><span class="line"></span><br><span class="line">  &gt; 方法：setXxx(参数<span class="number">1</span>， 参数<span class="number">2</span>)</span><br><span class="line">  &gt;</span><br><span class="line">  &gt; - Xxx：表示数据类型，例如setInt(参数<span class="number">1</span>， 参数<span class="number">2</span>)</span><br><span class="line">  &gt; - 参数<span class="number">1</span>：占位符 `?` 的位置编号，代表在SQL语句中第几个占位符，从<span class="number">1</span>开始</span><br><span class="line">  &gt; - 参数<span class="number">2</span>：占位符`?`的值</span><br><span class="line"></span><br><span class="line">- 执行SQL语句</span><br><span class="line"></span><br><span class="line">  &gt; executeUpdate(); <span class="comment">//执行DDL语句和DML语句</span></span><br><span class="line">  &gt;</span><br><span class="line">  &gt; executeQuery(); <span class="comment">//执行DQL语句</span></span><br><span class="line">  &gt;</span><br><span class="line">  &gt; - 注意：调用这两个方法时不需要传递SQL语句，在获取SQL语句执行对象PreparedStatement时已经对SQL语句进行预编译了。</span><br><span class="line"></span><br><span class="line">- 开启预编译功能</span><br><span class="line"></span><br><span class="line">  &gt; 在代码中编写url时需要加上以下参数：</span><br><span class="line">  &gt;</span><br><span class="line">  &gt; useServerPrepStmts=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">### <span class="number">3.5</span><span class="number">.3</span> PreparedStatement的使用</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC API详解： PreparedStatement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 1.注册驱动</span></span><br><span class="line">		Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">		<span class="comment">// 2.获取连接，如果连接的是本机MySQL且端口是3306可以简化书写</span></span><br><span class="line">		<span class="comment">// String url = &quot;jdbc:mysql://127.0.0.1:3306/db1&quot;;</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">		<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">		<span class="comment">//占位符 ？ 的值</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//定义SQL</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取PreparedStatement对象</span></span><br><span class="line">		<span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//设置占位符 ？ 的值</span></span><br><span class="line">		pstmt.setString(<span class="number">1</span>, name);</span><br><span class="line">		pstmt.setString(<span class="number">2</span>, pwd);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//执行SQL</span></span><br><span class="line">		<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//判断是否登录成功</span></span><br><span class="line">		<span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 7.释放资源</span></span><br><span class="line">		rs.close();</span><br><span class="line">		pstmt.close();</span><br><span class="line">		coon.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后，PreparedStatement原理较为复杂，读者也不太懂。</p>
<h1 id="4-数据库连接池"><a href="#4-数据库连接池" class="headerlink" title="4. 数据库连接池"></a>4. 数据库连接池</h1><h2 id="4-1-数据库连接池介绍"><a href="#4-1-数据库连接池介绍" class="headerlink" title="4.1 数据库连接池介绍"></a>4.1 数据库连接池介绍</h2><ul>
<li>数据库连接池是一个容器，负责分配、管理数据库连接（Connection）</li>
<li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立新连接</li>
</ul>
<p>之前代码中使用连接时每一个使用都创建一个Connection对象，使用完后将其销毁。这样<strong>重复创建销毁的过程时特别耗费计算机的性能和时间。</strong></p>
<p>但在使用数据库连接池后，可以实现对Connection对象的复用。</p>
<blockquote>
<p>连接池是在一开始就创建好了一些连接对象(Connection)存储起来，用户需要连接数据库时，不需要自己创建连接，只需从连接池中获取一个连接进行使用，使用完毕后在将连接对象(Connection)归还给连接池，这样可以起到资源复用的作用，也节省了频繁创建连接、销毁连接所花费的时间，从而提升了响应速度。</p>
</blockquote>
<h2 id="4-2-数据库连接池实现"><a href="#4-2-数据库连接池实现" class="headerlink" title="4.2 数据库连接池实现"></a>4.2 数据库连接池实现</h2><ul>
<li><p>标准接口：DataSource</p>
<p>官方提供的数据库连接池标准接口，由第三方实现此接口，该接口提供过了获取连接的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection <span class="title function_">getConnection</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>使用数据库连接池就不需要通过<code>DriverManager</code>对象获取<code>Connection</code>对象，而是通过连接池<code>DataSource</code>获取<code>Connection</code>对象。</p>
</li>
<li><p>常用数据库连接池： Druid(德鲁伊)</p>
<ul>
<li>Druid连接池是阿里巴巴开源的数据库连接池项目</li>
</ul>
</li>
</ul>
<h2 id="4-3-Druid使用"><a href="#4-3-Druid使用" class="headerlink" title="4.3 Druid使用"></a>4.3 Druid使用</h2><blockquote>
<ul>
<li>导入jar包 例如druid-1.1.12.jar &#x2F;&#x2F;将druid的jar包放在项目下的lib下并添加为库文件</li>
<li>定义配置文件</li>
<li>加载配置文件</li>
<li>获取数据库连接池对象</li>
<li>获取连接</li>
</ul>
</blockquote>
<p><strong>编写名为druid.properties的配置文件，放在src下的目录中</strong></p>
<p><strong>druid.properties的配置文件内容如下:</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver # MySQL JDBC驱动程序的类名，用于连接到MySQL数据库</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true # 连接到名为db1的MySQL数据库的URL，不使用SSL加密连接，并开启预处理语句功能</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root # 连接到MySQL数据库所使用的用户名</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234 # 连接到MySQL数据库所使用的密码</span></span><br><span class="line"><span class="comment"># 初始化连接数量，设置为5表示在连接池启动时创建5个连接</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数，设置为10表示连接池中最多同时存在10个连接</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10 </span></span><br><span class="line"><span class="comment"># 最大等待时间，设置为3000表示当所有连接都被占用时，新的请求最多等待3秒钟</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>

<p>使用druid的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid数据库连接池演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">//1.导入jar包</span></span><br><span class="line">		<span class="comment">//2.定义配置文件</span></span><br><span class="line">		<span class="comment">//3.加载配置文件</span></span><br><span class="line">		<span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">		prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc-demo/src/druid.properties&quot;</span>));<span class="comment">//即druid配置文件在项目中的位置</span></span><br><span class="line">		<span class="comment">//4.获取连接池对象</span></span><br><span class="line">		<span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">		<span class="comment">//5.获取数据库连接Connection</span></span><br><span class="line">		<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">		...获取到连接后继续进行其它操作</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一次写这么长的文章，虽然都是抄的黑马，仍希望这是自己好的开始。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>数据库操作</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo图片问题</title>
    <url>/2023/11/23/hexo%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>hexo博客在添加图片时遇到了问题，下面说两个解决方案：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">图片多用方案一，图片少用方案二</span><br></pre></td></tr></table></figure>



<h1 id="解决方案一："><a href="#解决方案一：" class="headerlink" title="解决方案一："></a>解决方案一：</h1><blockquote>
<p><a href="https://blog.51cto.com/u_15477117/4919656">参考链接</a></p>
<p>本方法通过<code>&#123;%%&#125;</code>插入本地图片，首先要修改博客配置文件<code>_config.yml</code>,把配置文件里的<code>post_asset_folder</code>设置为<code>true</code>，这时用<code>hexo new &quot;文章标题&quot;</code>创建文章时会自动创建一个同名的文件夹，用于存放资源文件。</p>
<p>使用<code>&#123;%%&#125;</code>方法必须将图片放在新建文件时生成的同名文件夹目录下，然后使用以下命令格式即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 图片文件名 图片加载失败的描述 %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>缺点</strong></p>
<p>新建文章时会新建同名目录用于存放图片，图片不多的话就看着很烦，更重要的是图片无法在Typora中展示，只能在博客中看，这让我很不爽。</p>
</li>
</ul>
</blockquote>
<h1 id="解决方法二："><a href="#解决方法二：" class="headerlink" title="解决方法二："></a>解决方法二：</h1><blockquote>
<p><a href="https://i007it.com/2022/04/30/Hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E6%96%B9%E5%BC%8F%EF%BC%88%E5%85%BC%E5%AE%B9Typora%EF%BC%89/">参考链接</a></p>
<p>本方法通过<code>&lt;img src=&quot;/img/xxx.jpg&quot;/&gt;</code>方式插入图片，详细步骤在链接中，原文章中有一个点说的不太准确，就是在Typora中设置图片根目录时选择的目录是<strong>hexo目录下的source目录</strong>，不是source&#x2F;img目录。其余跟原文章一样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;/img/xxx.jpg&quot;</span> style=<span class="string">&quot;zoom:80%&quot;</span> /&gt; <span class="comment">//80%是缩放比例</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>缺点</strong></p>
<p>图片多的话会比较麻烦，但是在Typora和博客中图片均会显示。</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>windows快捷键</title>
    <url>/2023/11/23/windows%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ALT + ESC</td>
<td>隐藏当前窗口</td>
</tr>
<tr>
<td align="left">WIN + 向上方向键</td>
<td>当前窗口最大化</td>
</tr>
<tr>
<td align="left">WIN + 其它方向键</td>
<td>当前窗口在屏幕中的位置</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>在github pages的第一篇博客</title>
    <url>/2023/11/17/%E5%9C%A8github-pages%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Hexo部署相关命令"><a href="#Hexo部署相关命令" class="headerlink" title="Hexo部署相关命令"></a>Hexo部署相关命令</h1><ol>
<li>新建文章:</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章名&quot;</span> <span class="comment">//相关文章会在博客目录source\_posts中显示，打开后直接编辑即可，已配好表头</span></span><br></pre></td></tr></table></figure>

<p>​	2.清除缓存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean || hexo cl        # 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line"></span><br><span class="line">在使用 Hexo 进行博客开发时，可以在以下情况下使用 hexo clean 命令：</span><br><span class="line">清除缓存：当你对 Hexo 博客的配置或插件进行了修改后，可以使用 hexo clean 命令清除缓存，以便让 Hexo 重新生成静态文件，并确保新的配置和插件生效。</span><br><span class="line">重建站点：在某些情况下，你可能需要完全重建你的站点，这时可以先运行 hexo clean 清除之前生成的静态文件和缓存，然后再运行 hexo generate 重新生成静态文件。</span><br></pre></td></tr></table></figure>

<p>​	3.生成静态文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo generate || hexo g        # 生成静态文件</span><br></pre></td></tr></table></figure>

<p>​	4.启动服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server || hexo s          # 启动本地服务器</span><br></pre></td></tr></table></figure>

<p>​	5.部署网站：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy || hexo d          # 部署网站，上传到githubpages</span><br></pre></td></tr></table></figure>

<h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>这是我在github pages上的第一篇博客，中间光搭建就花了我很长时间，原本图省事想在原生hexo写博客来，但是看到next很漂亮就搞了这个主题，搭建完成后我也很开心，虽然都是在网上到处找的答案。对我来说最大的困难不是技术，因为相关的像git、nodejs等环境早在很久之前就已经配好了，我是在主题挑选上犹豫不决浪费了太多的时间，大概又90%的时间是浪费的，怪自己太垃圾了，刚开始是跟着哔哩哔哩的视频部署了一个jekyll博客，嫌弃太丑，而且如果想在本地运行的话要配置ruby环境，我一是没学过，二是听说windows对ruby不友好，然后我就删了仓库，第二天又重新建了一个，一上来也是直接搞得next主题，没搞明白就删了换成了原生hexo，晚上就又换成了next，虽然我没有掌握很多的知识，但我知道了一旦配置好像hexo这样的博客框架，再去换主题的时候就很快，换next就很快，而且写文章的方法是通用的，只不过在不同的主题上的显示方式不同。我算是一个喜欢记录的人，我平常写日记，我希望把写博客坚持下去，虽然比别人晚了好多年。</p>
]]></content>
      <categories>
        <category>人生之路</category>
      </categories>
  </entry>
</search>
